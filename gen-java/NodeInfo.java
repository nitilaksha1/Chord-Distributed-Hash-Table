/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-24")
public class NodeInfo implements org.apache.thrift.TBase<NodeInfo, NodeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NodeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeInfo");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUCCESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("successor", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PREDECESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("predecessor", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FINGERTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fingertable", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField NODE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeMap", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeInfoTupleSchemeFactory());
  }

  public int key; // required
  public ChordNode successor; // required
  public ChordNode predecessor; // required
  public List<FingerTableInfo> fingertable; // required
  public Map<Integer,ChordNode> nodeMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    SUCCESSOR((short)2, "successor"),
    PREDECESSOR((short)3, "predecessor"),
    FINGERTABLE((short)4, "fingertable"),
    NODE_MAP((short)5, "nodeMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // SUCCESSOR
          return SUCCESSOR;
        case 3: // PREDECESSOR
          return PREDECESSOR;
        case 4: // FINGERTABLE
          return FINGERTABLE;
        case 5: // NODE_MAP
          return NODE_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUCCESSOR, new org.apache.thrift.meta_data.FieldMetaData("successor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ChordNode")));
    tmpMap.put(_Fields.PREDECESSOR, new org.apache.thrift.meta_data.FieldMetaData("predecessor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ChordNode")));
    tmpMap.put(_Fields.FINGERTABLE, new org.apache.thrift.meta_data.FieldMetaData("fingertable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FingerTableInfo.class))));
    tmpMap.put(_Fields.NODE_MAP, new org.apache.thrift.meta_data.FieldMetaData("nodeMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ChordNode"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeInfo.class, metaDataMap);
  }

  public NodeInfo() {
  }

  public NodeInfo(
    int key,
    ChordNode successor,
    ChordNode predecessor,
    List<FingerTableInfo> fingertable,
    Map<Integer,ChordNode> nodeMap)
  {
    this();
    this.key = key;
    setKeyIsSet(true);
    this.successor = successor;
    this.predecessor = predecessor;
    this.fingertable = fingertable;
    this.nodeMap = nodeMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeInfo(NodeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.key = other.key;
    if (other.isSetSuccessor()) {
      this.successor = other.successor;
    }
    if (other.isSetPredecessor()) {
      this.predecessor = other.predecessor;
    }
    if (other.isSetFingertable()) {
      List<FingerTableInfo> __this__fingertable = new ArrayList<FingerTableInfo>(other.fingertable.size());
      for (FingerTableInfo other_element : other.fingertable) {
        __this__fingertable.add(new FingerTableInfo(other_element));
      }
      this.fingertable = __this__fingertable;
    }
    if (other.isSetNodeMap()) {
      Map<Integer,ChordNode> __this__nodeMap = new HashMap<Integer,ChordNode>(other.nodeMap.size());
      for (Map.Entry<Integer, ChordNode> other_element : other.nodeMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        ChordNode other_element_value = other_element.getValue();

        Integer __this__nodeMap_copy_key = other_element_key;

        ChordNode __this__nodeMap_copy_value = other_element_value;

        __this__nodeMap.put(__this__nodeMap_copy_key, __this__nodeMap_copy_value);
      }
      this.nodeMap = __this__nodeMap;
    }
  }

  public NodeInfo deepCopy() {
    return new NodeInfo(this);
  }

  @Override
  public void clear() {
    setKeyIsSet(false);
    this.key = 0;
    this.successor = null;
    this.predecessor = null;
    this.fingertable = null;
    this.nodeMap = null;
  }

  public int getKey() {
    return this.key;
  }

  public NodeInfo setKey(int key) {
    this.key = key;
    setKeyIsSet(true);
    return this;
  }

  public void unsetKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
  }

  public void setKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
  }

  public ChordNode getSuccessor() {
    return this.successor;
  }

  public NodeInfo setSuccessor(ChordNode successor) {
    this.successor = successor;
    return this;
  }

  public void unsetSuccessor() {
    this.successor = null;
  }

  /** Returns true if field successor is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessor() {
    return this.successor != null;
  }

  public void setSuccessorIsSet(boolean value) {
    if (!value) {
      this.successor = null;
    }
  }

  public ChordNode getPredecessor() {
    return this.predecessor;
  }

  public NodeInfo setPredecessor(ChordNode predecessor) {
    this.predecessor = predecessor;
    return this;
  }

  public void unsetPredecessor() {
    this.predecessor = null;
  }

  /** Returns true if field predecessor is set (has been assigned a value) and false otherwise */
  public boolean isSetPredecessor() {
    return this.predecessor != null;
  }

  public void setPredecessorIsSet(boolean value) {
    if (!value) {
      this.predecessor = null;
    }
  }

  public int getFingertableSize() {
    return (this.fingertable == null) ? 0 : this.fingertable.size();
  }

  public java.util.Iterator<FingerTableInfo> getFingertableIterator() {
    return (this.fingertable == null) ? null : this.fingertable.iterator();
  }

  public void addToFingertable(FingerTableInfo elem) {
    if (this.fingertable == null) {
      this.fingertable = new ArrayList<FingerTableInfo>();
    }
    this.fingertable.add(elem);
  }

  public List<FingerTableInfo> getFingertable() {
    return this.fingertable;
  }

  public NodeInfo setFingertable(List<FingerTableInfo> fingertable) {
    this.fingertable = fingertable;
    return this;
  }

  public void unsetFingertable() {
    this.fingertable = null;
  }

  /** Returns true if field fingertable is set (has been assigned a value) and false otherwise */
  public boolean isSetFingertable() {
    return this.fingertable != null;
  }

  public void setFingertableIsSet(boolean value) {
    if (!value) {
      this.fingertable = null;
    }
  }

  public int getNodeMapSize() {
    return (this.nodeMap == null) ? 0 : this.nodeMap.size();
  }

  public void putToNodeMap(int key, ChordNode val) {
    if (this.nodeMap == null) {
      this.nodeMap = new HashMap<Integer,ChordNode>();
    }
    this.nodeMap.put(key, val);
  }

  public Map<Integer,ChordNode> getNodeMap() {
    return this.nodeMap;
  }

  public NodeInfo setNodeMap(Map<Integer,ChordNode> nodeMap) {
    this.nodeMap = nodeMap;
    return this;
  }

  public void unsetNodeMap() {
    this.nodeMap = null;
  }

  /** Returns true if field nodeMap is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeMap() {
    return this.nodeMap != null;
  }

  public void setNodeMapIsSet(boolean value) {
    if (!value) {
      this.nodeMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((Integer)value);
      }
      break;

    case SUCCESSOR:
      if (value == null) {
        unsetSuccessor();
      } else {
        setSuccessor((ChordNode)value);
      }
      break;

    case PREDECESSOR:
      if (value == null) {
        unsetPredecessor();
      } else {
        setPredecessor((ChordNode)value);
      }
      break;

    case FINGERTABLE:
      if (value == null) {
        unsetFingertable();
      } else {
        setFingertable((List<FingerTableInfo>)value);
      }
      break;

    case NODE_MAP:
      if (value == null) {
        unsetNodeMap();
      } else {
        setNodeMap((Map<Integer,ChordNode>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case SUCCESSOR:
      return getSuccessor();

    case PREDECESSOR:
      return getPredecessor();

    case FINGERTABLE:
      return getFingertable();

    case NODE_MAP:
      return getNodeMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case SUCCESSOR:
      return isSetSuccessor();
    case PREDECESSOR:
      return isSetPredecessor();
    case FINGERTABLE:
      return isSetFingertable();
    case NODE_MAP:
      return isSetNodeMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeInfo)
      return this.equals((NodeInfo)that);
    return false;
  }

  public boolean equals(NodeInfo that) {
    if (that == null)
      return false;

    boolean this_present_key = true;
    boolean that_present_key = true;
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (this.key != that.key)
        return false;
    }

    boolean this_present_successor = true && this.isSetSuccessor();
    boolean that_present_successor = true && that.isSetSuccessor();
    if (this_present_successor || that_present_successor) {
      if (!(this_present_successor && that_present_successor))
        return false;
      if (!this.successor.equals(that.successor))
        return false;
    }

    boolean this_present_predecessor = true && this.isSetPredecessor();
    boolean that_present_predecessor = true && that.isSetPredecessor();
    if (this_present_predecessor || that_present_predecessor) {
      if (!(this_present_predecessor && that_present_predecessor))
        return false;
      if (!this.predecessor.equals(that.predecessor))
        return false;
    }

    boolean this_present_fingertable = true && this.isSetFingertable();
    boolean that_present_fingertable = true && that.isSetFingertable();
    if (this_present_fingertable || that_present_fingertable) {
      if (!(this_present_fingertable && that_present_fingertable))
        return false;
      if (!this.fingertable.equals(that.fingertable))
        return false;
    }

    boolean this_present_nodeMap = true && this.isSetNodeMap();
    boolean that_present_nodeMap = true && that.isSetNodeMap();
    if (this_present_nodeMap || that_present_nodeMap) {
      if (!(this_present_nodeMap && that_present_nodeMap))
        return false;
      if (!this.nodeMap.equals(that.nodeMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_key = true;
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_successor = true && (isSetSuccessor());
    list.add(present_successor);
    if (present_successor)
      list.add(successor);

    boolean present_predecessor = true && (isSetPredecessor());
    list.add(present_predecessor);
    if (present_predecessor)
      list.add(predecessor);

    boolean present_fingertable = true && (isSetFingertable());
    list.add(present_fingertable);
    if (present_fingertable)
      list.add(fingertable);

    boolean present_nodeMap = true && (isSetNodeMap());
    list.add(present_nodeMap);
    if (present_nodeMap)
      list.add(nodeMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(NodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessor()).compareTo(other.isSetSuccessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successor, other.successor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredecessor()).compareTo(other.isSetPredecessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredecessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predecessor, other.predecessor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFingertable()).compareTo(other.isSetFingertable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFingertable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fingertable, other.fingertable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeMap()).compareTo(other.isSetNodeMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeMap, other.nodeMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeInfo(");
    boolean first = true;

    sb.append("key:");
    sb.append(this.key);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successor:");
    if (this.successor == null) {
      sb.append("null");
    } else {
      sb.append(this.successor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predecessor:");
    if (this.predecessor == null) {
      sb.append("null");
    } else {
      sb.append(this.predecessor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fingertable:");
    if (this.fingertable == null) {
      sb.append("null");
    } else {
      sb.append(this.fingertable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeMap:");
    if (this.nodeMap == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeInfoStandardSchemeFactory implements SchemeFactory {
    public NodeInfoStandardScheme getScheme() {
      return new NodeInfoStandardScheme();
    }
  }

  private static class NodeInfoStandardScheme extends StandardScheme<NodeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.key = iprot.readI32();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUCCESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.successor = new ChordNode();
              struct.successor.read(iprot);
              struct.setSuccessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PREDECESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.predecessor = new ChordNode();
              struct.predecessor.read(iprot);
              struct.setPredecessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FINGERTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fingertable = new ArrayList<FingerTableInfo>(_list0.size);
                FingerTableInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new FingerTableInfo();
                  _elem1.read(iprot);
                  struct.fingertable.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFingertableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NODE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.nodeMap = new HashMap<Integer,ChordNode>(2*_map3.size);
                int _key4;
                ChordNode _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readI32();
                  _val5 = new ChordNode();
                  _val5.read(iprot);
                  struct.nodeMap.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setNodeMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeI32(struct.key);
      oprot.writeFieldEnd();
      if (struct.successor != null) {
        oprot.writeFieldBegin(SUCCESSOR_FIELD_DESC);
        struct.successor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.predecessor != null) {
        oprot.writeFieldBegin(PREDECESSOR_FIELD_DESC);
        struct.predecessor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fingertable != null) {
        oprot.writeFieldBegin(FINGERTABLE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fingertable.size()));
          for (FingerTableInfo _iter7 : struct.fingertable)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nodeMap != null) {
        oprot.writeFieldBegin(NODE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.nodeMap.size()));
          for (Map.Entry<Integer, ChordNode> _iter8 : struct.nodeMap.entrySet())
          {
            oprot.writeI32(_iter8.getKey());
            _iter8.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeInfoTupleSchemeFactory implements SchemeFactory {
    public NodeInfoTupleScheme getScheme() {
      return new NodeInfoTupleScheme();
    }
  }

  private static class NodeInfoTupleScheme extends TupleScheme<NodeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKey()) {
        optionals.set(0);
      }
      if (struct.isSetSuccessor()) {
        optionals.set(1);
      }
      if (struct.isSetPredecessor()) {
        optionals.set(2);
      }
      if (struct.isSetFingertable()) {
        optionals.set(3);
      }
      if (struct.isSetNodeMap()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetKey()) {
        oprot.writeI32(struct.key);
      }
      if (struct.isSetSuccessor()) {
        struct.successor.write(oprot);
      }
      if (struct.isSetPredecessor()) {
        struct.predecessor.write(oprot);
      }
      if (struct.isSetFingertable()) {
        {
          oprot.writeI32(struct.fingertable.size());
          for (FingerTableInfo _iter9 : struct.fingertable)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetNodeMap()) {
        {
          oprot.writeI32(struct.nodeMap.size());
          for (Map.Entry<Integer, ChordNode> _iter10 : struct.nodeMap.entrySet())
          {
            oprot.writeI32(_iter10.getKey());
            _iter10.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.key = iprot.readI32();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.successor = new ChordNode();
        struct.successor.read(iprot);
        struct.setSuccessorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.predecessor = new ChordNode();
        struct.predecessor.read(iprot);
        struct.setPredecessorIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fingertable = new ArrayList<FingerTableInfo>(_list11.size);
          FingerTableInfo _elem12;
          for (int _i13 = 0; _i13 < _list11.size; ++_i13)
          {
            _elem12 = new FingerTableInfo();
            _elem12.read(iprot);
            struct.fingertable.add(_elem12);
          }
        }
        struct.setFingertableIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodeMap = new HashMap<Integer,ChordNode>(2*_map14.size);
          int _key15;
          ChordNode _val16;
          for (int _i17 = 0; _i17 < _map14.size; ++_i17)
          {
            _key15 = iprot.readI32();
            _val16 = new ChordNode();
            _val16.read(iprot);
            struct.nodeMap.put(_key15, _val16);
          }
        }
        struct.setNodeMapIsSet(true);
      }
    }
  }

}

